.. _Developer_Guide:

#########################
M2 Developer Guide
#########################

This CSC is a *ts_salobj* based control system integrating the middleware layer and the high-level state machine.

.. _Dependencies:

Dependencies
============

* `ts_salobj <https://github.com/lsst-ts/ts_salobj>`_
* `ts_config_mttcs <https://github.com/lsst-ts/ts_config_mttcs>`_
* `ts_tcpip <https://github.com/lsst-ts/ts_tcpip>`_
* `ts_xml <https://github.com/lsst-ts/ts_xml>`_
* `ts_utils <https://github.com/lsst-ts/ts_utils>`_
* `ts_m2com <https://github.com/lsst-ts/ts_m2com>`_

.. _Architecture:

Architecture
=============

The classes in module are listed below.

.. mermaid:: ../uml/m2_class.uml
    :caption: Class diagram of M2

* **M2** is a CSC class. It inherits from the *ts_salobj*'s **ConfigurableCsc**. *ts_salobj* provides interfaces for the SAL communication.
* **Translator** translates the message from component to have the correct format for **M2** to use to communicate among components by SAL.

Only the **M2** instance has the knowledge of high-level control logic and middleware layer provided by **ConfigurableCsc**.
The simulation mode is supported by mock classes in `ts_m2com <https://github.com/lsst-ts/ts_m2com>`_.

The *M2* CSC communicates with the M2 engineering user interface (EUI, `ts_mtm2 <https://github.com/lsst-ts/ts_mtm2>`_) deployed in a Linux server at this moment.
It will be upgraded to communiate with the M2 cell control system (`ts_mtm2_cell <https://github.com/lsst-ts/ts_mtm2_cell>`_) deployed in a NI cRIO controller in the near future.
There are two state machines defined in the M2 EUI.
One is used in the manual local mode and the other one is used in the remote control.
For the latter, the original developer in vendor used the LSST state machine defined in LTS-307, TCS Software Component Interface.
Therefore, to simplify the implementation, the state machine in *M2* CSC is designed to decouple the controller's state machine with the state machine in *ts_salobj*.
The detail can follow :ref:`State_Machine`.

.. _API:

APIs
=============

This section is autogenerated from docstrings.

.. automodapi:: lsst.ts.m2
    :no-inheritance-diagram:

.. _Build_And_Test:

Build and Test
==============

Using `docker <https://www.docker.com>`_ is highly recommended.
The Docker files of development can follow: `develop-env <https://github.com/lsst-ts/ts_Dockerfiles/tree/develop/develop-env>`_.
The built docker image is `here <https://hub.docker.com/repository/docker/lsstts/develop-env>`_.

To setup and test the CSC using Docker, enter:

.. code-block:: bash

    docker run -it --rm -v ${repo_location}:/home/saluser/ts_m2 lsstts/develop-env:${tag}
    cd ts_m2
    setup -k -r .

The environment shall be setup either from */home/saluser/.setup_dev.sh*.

.. _Usage:

Usage
=====

To start the *M2* CSC, enter the following command:

.. code-block:: bash

    bin/run_mtm2

You can use the argument of *-s* to run the simulation mode or *-h* to get all available argument details.
Stopping the CSC is done by SIG-INTing the process, usually by :kbd:`ctrl` + :kbd:`c`.

.. _Contributing:

Contributing
============

To contribute, please start a new pull request on `GitHub <https://github.com/lsst-ts/ts_m2>`_.
Feature requests shall be filled in JIRA with the *ts_m2* or *M2* label.
In all cases, reaching out to the :ref:`contacts for this CSC <Contact_Personnel>` is recommended.
